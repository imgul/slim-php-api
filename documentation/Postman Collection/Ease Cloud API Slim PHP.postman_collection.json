{
	"info": {
		"_postman_id": "a0da2db3-fe4b-4b4b-807a-bfac0e624a32",
		"name": "Ease Cloud API Slim PHP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22928355"
	},
	"item": [
		{
			"name": "Check API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated the test for response status code to handle the TypeError\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response json status is \\\"OK\\\"\", function () {\r",
							"  pm.expect(pm.response.json().status).to.equal(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response json status is \\\"API is running\\\"\", function () {\r",
							"  pm.expect(pm.response.json().message).to.equal(\"API is running\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{App}}api-status",
					"host": [
						"{{App}}api-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check DB Connection Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated the test for response status code to handle the TypeError\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response json status is \\\"OK\\\"\", function () {\r",
							"  pm.expect(pm.response.json().status).to.equal(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response json status is \\\"API is running\\\"\", function () {\r",
							"  pm.expect(pm.response.json().message).to.equal(\"API is running\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{App}}db-status",
					"host": [
						"{{App}}db-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve All CF Submissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the cfSubmissions object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.data.cfSubmissions).to.exist.and.to.be.an('array');",
							"  responseData.data.cfSubmissions.forEach(function(submission) {",
							"    pm.expect(submission).to.be.an('object');",
							"    pm.expect(submission).to.have.property('id');",
							"    pm.expect(submission).to.have.property('name');",
							"    pm.expect(submission).to.have.property('email');",
							"    pm.expect(submission).to.have.property('message');",
							"    pm.expect(submission).to.have.property('user_id');",
							"    pm.expect(submission).to.have.property('ip');",
							"    pm.expect(submission).to.have.property('user_agent');",
							"    pm.expect(submission).to.have.property('request_uri');",
							"    pm.expect(submission).to.have.property('http_host');",
							"    pm.expect(submission).to.have.property('created_at');",
							"    pm.expect(submission).to.have.property('updated_at');",
							"    pm.expect(submission).to.have.property('comments');",
							"    pm.expect(submission).to.have.property('comments_at');",
							"    pm.expect(submission).to.have.property('comments_by');",
							"    pm.expect(submission).to.have.property('cf_inbox_type_id');",
							"    pm.expect(submission).to.have.property('contact_form_id');",
							"    pm.expect(submission).to.have.property('cf_label_id');",
							"    pm.expect(submission).to.have.property('read_at');",
							"    pm.expect(submission).to.have.property('deleted_at');",
							"    pm.expect(submission).to.have.property('starred_at');",
							"    pm.expect(submission).to.have.property('archived_at');",
							"    pm.expect(submission).to.have.property('spam_score');",
							"    pm.expect(submission).to.have.property('spam_reported_at');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Id field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.cfSubmissions).to.be.an('array');",
							"    responseData.data.cfSubmissions.forEach(function(submission) {",
							"        pm.expect(submission.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Created_at and updated_at fields are in valid date-time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.cfSubmissions).to.be.an('array');",
							"    ",
							"    responseData.data.cfSubmissions.forEach(function(submission) {",
							"        pm.expect(submission.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/);",
							"        pm.expect(submission.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{App}}cf-submissions",
					"host": [
						"{{App}}cf-submissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status, message, and data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Data id should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Gulzaib",
							"type": "text"
						},
						{
							"key": "email",
							"value": "gulzaib@mail.com",
							"type": "text"
						},
						{
							"key": "message",
							"value": "Hi this is my test message",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{App}}cf-submissions",
					"host": [
						"{{App}}cf-submissions"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "App",
			"value": "http://localhost:8080/api/",
			"type": "string"
		}
	]
}